// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  address   String   @unique // Sei wallet address
  username  String?  @unique
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sentTransfers     Transfer[] @relation("TransferSender")
  receivedTransfers Transfer[] @relation("TransferRecipient")
  groupMemberships  GroupMember[]
  potContributions  PotContribution[]
  vaultDeposits     VaultDeposit[]
  escrowCases       EscrowCase[] @relation("EscrowSender")
  notifications     Notification[]

  @@index([address])
  @@index([username])
}

model Transfer {
  id          String   @id @default(cuid())
  sender      String   // Sei address
  recipient   String   // Sei address
  amount      String   // Amount in usei
  denom       String   @default("usei")
  expiry      DateTime
  metadata    String?  // JSON string
  status      String   @default("PENDING") // PENDING, CLAIMED, REFUNDED, EXPIRED
  txHash      String?  // Transaction hash
  blockHeight Int?     // Block height when created
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  senderUser     User? @relation("TransferSender", fields: [sender], references: [address])
  recipientUser  User? @relation("TransferRecipient", fields: [recipient], references: [address])

  @@index([sender])
  @@index([recipient])
  @@index([status])
  @@index([blockHeight])
}

model Group {
  id          String   @id @default(cuid())
  groupId     String   @unique // On-chain group ID
  name        String
  description String?
  members     GroupMember[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([groupId])
}

model GroupMember {
  id        String   @id @default(cuid())
  groupId   String
  userId    String
  joinedAt  DateTime @default(now())

  // Relations
  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
}

model Pot {
  id            String   @id @default(cuid())
  potId         String   @unique // On-chain pot ID
  name          String
  description   String?
  targetAmount  String   // Target amount in usei
  currentAmount String   @default("0") // Current amount in usei
  expiry        DateTime
  status        String   @default("ACTIVE") // ACTIVE, COMPLETED, EXPIRED
  contributors  PotContribution[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([potId])
  @@index([status])
}

model PotContribution {
  id        String   @id @default(cuid())
  potId     String
  userId    String
  amount    String   // Amount contributed in usei
  txHash    String?  // Transaction hash
  createdAt DateTime @default(now())

  // Relations
  pot  Pot  @relation(fields: [potId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([potId])
  @@index([userId])
}

model Vault {
  id            String   @id @default(cuid())
  vaultId       String   @unique // On-chain vault ID
  name          String
  description   String?
  strategy      String
  riskLevel     String   // LOW, MEDIUM, HIGH
  totalDeposits String   @default("0") // Total deposits in usei
  totalValue    String   @default("0") // Current total value in usei
  apr           String   @default("0") // Annual percentage rate
  status        String   @default("ACTIVE") // ACTIVE, PAUSED, CLOSED
  deposits      VaultDeposit[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([vaultId])
  @@index([strategy])
  @@index([status])
}

model VaultDeposit {
  id        String   @id @default(cuid())
  vaultId   String
  userId    String
  amount    String   // Amount deposited in usei
  shares    String   // Vault shares received
  txHash    String?  // Transaction hash
  createdAt DateTime @default(now())

  // Relations
  vault Vault @relation(fields: [vaultId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([vaultId])
  @@index([userId])
}

model EscrowCase {
  id         String   @id @default(cuid())
  escrowId   String   @unique // On-chain escrow ID
  sender     String   // Sei address
  recipient  String   // Sei address
  amount     String   // Amount in usei
  denom      String   @default("usei")
  expiry     DateTime
  conditions String?  // JSON string
  status     String   @default("PENDING") // PENDING, RELEASED, REFUNDED, EXPIRED
  txHash     String?  // Transaction hash
  blockHeight Int?    // Block height when created
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  senderUser User? @relation("EscrowSender", fields: [sender], references: [address])

  @@index([escrowId])
  @@index([sender])
  @@index([recipient])
  @@index([status])
  @@index([blockHeight])
}

model EventLog {
  id          String   @id @default(cuid())
  eventType   String   // e.g., "create_transfer", "claim_transfer"
  contract    String   // Contract address
  data        String   // Event data (JSON string)
  txHash      String   // Transaction hash
  blockHeight Int      // Block height
  blockTime   DateTime // Block timestamp
  createdAt   DateTime @default(now())

  @@index([eventType])
  @@index([contract])
  @@index([blockHeight])
  @@index([txHash])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // TRANSFER_CREATED, TRANSFER_CLAIMED, etc.
  title     String
  message   String
  data      String?  // Additional data (JSON string)
  channels  String   // Comma-separated channels (TELEGRAM,EMAIL,WEBPUSH)
  status    String   @default("PENDING") // PENDING, SENT, FAILED
  sentAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([status])
}

model NotificationDelivery {
  id             String   @id @default(cuid())
  notificationId String
  channel        String   // TELEGRAM, EMAIL, WEBPUSH
  status         String   @default("PENDING") // PENDING, SENT, FAILED
  error          String?
  sentAt         DateTime?
  createdAt      DateTime @default(now())

  @@index([notificationId])
  @@index([channel])
  @@index([status])
}